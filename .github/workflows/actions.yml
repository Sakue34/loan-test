name: innovativeproject-loancalculator

on:
  push:
    branches: '**'
  pull_request:
    branches: '**'

jobs:
  lint-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.9.10"

    - name: Install poetry
      uses: snok/install-poetry@v1.0.0
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        version: 1.1.13

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        cd backend
        poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        
    - name: Format and lint backend with Black
      run: |
        cd backend
        poetry run black --check .    
    
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.9.10"

    - name: Install poetry
      uses: snok/install-poetry@v1.0.0
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        version: 1.1.13

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}    
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    - name: Test backend with pytest
      run: |
        cd backend
        poetry run pytest

  lint-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: "16.14.0"
        cache: "npm"
        cache-dependency-path: frontend/package-lock.json
  
    - name: Format and lint frontend with eslint and prettier
      run: |
        cd frontend
        npm install
        npx prettier --write ./src
        npx eslint --fix ./src
  
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: "16.14.0"
        cache: "npm"
        cache-dependency-path: frontend/package-lock.json
    
    - name: Test frontend with npm test
      run: |
        cd frontend
        npm install
        npm test
        
  
  build-docker-image:
    runs-on: ubuntu-latest
    needs: [lint-backend, test-backend, lint-frontend, test-frontend]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build docker images
      run: |
        docker-compose -f docker/docker-compose.yaml build
  